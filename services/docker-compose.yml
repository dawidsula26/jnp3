version: "3.7"
services:
  front_worker:
    build:
      context: ./frontend

  front:
    image: nginx:latest
    volumes:
      - ./nginx/nginx-front.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - front_worker
    ports:
      - "80:80"

  statistics:
    image: nginx:latest
    volumes:
      - ./nginx/nginx-statistics.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - statistics_worker
    ports:
      - "8080:8080"

  statistics_worker:
    build:
      context: ./statistics
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      mongo-init:
        condition: service_completed_successfully
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - ./scala-common:/scala-common
    environment:
      SETUP_VERSION: "dockerTest"

  calculations:
    build:
      context: ./calculations
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    ports:
      - "8081:8080"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - ./scala-common:/scala-common
    environment:
      SETUP_VERSION: "dockerTest"

  scraper:
    build:
      context: ./scraper
    depends_on:
      kafka-init:
        condition: service_completed_successfully

  redis:
    image: "redis:alpine"
    container_name: redis-container
    ports:
      - "6379:6379"

  # Kafka 
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    ports:
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092,PLAINTEXT_INTERNAL://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  kafka-init:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - kafka
    command: "bash -c 'sh /init/start.sh'"
    volumes:
      - ./kafka:/init
  
  # Mongo
  mongo:
    image: mongo:6.0.1
    container_name: mongo
    command: mongos --port 27017 --configdb rs-config-server/configsvr01:27017,configsvr02:27017 --bind_ip_all
    ports:
      - "27017:27017"
    volumes:
      - ./scripts:/scripts

  configsvr01:
    image: mongo:6.0.1
    container_name: mongo-config-01 
    command: mongod --port 27017 --configsvr --replSet rs-config-server
    volumes:
      - ./scripts:/scripts 
  configsvr02:
    image: mongo:6.0.1
    container_name: mongo-config-02 
    command: mongod --port 27017 --configsvr --replSet rs-config-server
    volumes:
      - ./scripts:/scripts

  shard01-a:
    image: mongo:6.0.1
    container_name: shard-01-node-a
    command: mongod --port 27017 --shardsvr --replSet rs-shard-01
    volumes:
      - ./scripts:/scripts
  shard01-b:
    image: mongo:6.0.1
    container_name: shard-01-node-b
    command: mongod --port 27017 --shardsvr --replSet rs-shard-01
    volumes:
      - ./scripts:/scripts

  shard02-a:
    image: mongo:6.0.1
    container_name: shard-02-node-a
    command: mongod --port 27017 --shardsvr --replSet rs-shard-02
    volumes:
      - ./scripts:/scripts
  shard02-b:
    image: mongo:6.0.1
    container_name: shard-02-node-b
    command: mongod --port 27017 --shardsvr --replSet rs-shard-02
    volumes:
      - ./scripts:/scripts

  mongo-init: 
    image: mongo:6.0.1
    command: "bash -c 'sh /init/start.sh'"
    depends_on:
      - mongo
      - configsvr01
      - configsvr02
      - shard01-a
      - shard01-b
      - shard02-a
      - shard02-b
    volumes:
      - ./mongo:/init